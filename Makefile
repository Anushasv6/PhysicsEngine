#
# @brief       Sample code for demonstrating Make.
#
# @copyright   Copyright (c) 2016 C-Veda Technologies. All rights reserved.
#

# *************************************** System Configuration Section *************************************** 

# Project Directories
SRC_DIR := src
INC_DIR := inc
OUT_DIR := bin

#VPATH = src
vpath %.c $(SRC_DIR)
vpath %.h $(INC_DIR)
vpath %.o $(OUT_DIR)

# Create bin directory which is required for storing object files/executable...
#$(shell echo Test Message)

PROGRAM := $(OUT_DIR)/HelloWorld

# src/Greeting.c, src/HelloWorld.c
C_FILES := $(wildcard $(SRC_DIR)/*.c)

# src/Greeting.o, src/HelloWorld.o
OBJS    := $(patsubst %.c, %.o, $(C_FILES))

# bin/Greeting.o, bin/HelloWorld.o
OBJSB   := $(patsubst $(SRC_DIR)/%, $(OUT_DIR)/%, $(OBJS))

# Greeting.o, 	  HelloWorld.o
OBJS    := $(patsubst $(SRC_DIR)/%, %, $(OBJS))

CC      := gcc
CFLAGS  := -g -Wall -pedantic -std=c99 -I $(INC_DIR) #-Werror
LFLAGS  := -lm
LLIBS   := -lGL -lGLU -lglut 

# *************************************** Rules Section *************************************** 

all: $(PROGRAM)

# Rule to build the primary target...
$(PROGRAM): .depend buildStartMsg $(OBJS)
	@printf "\n*** Building Executable ***\n"
	$(CC) $(CFLAGS) $(OBJSB) $(LFLAGS) -o $(PROGRAM) $(LLIBS)

# Phony target to generate dependencies only...
depend: .depend

# File target to generate dependencies...
.depend:
	@printf "\n*** Generating dependencies ***\n"
	@$(foreach var, $(C_FILES), $(shell gcc -MM -MF depend $(var) -I $(INC_DIR); cat depend >> .depend;))
	@rm -f depend

# Include the .depend file into the curent file, so dependency graph is updated
# with the dependencies generated by the compiler for each file...
-include .depend

# Phony target to create output directory...
createOutDir:
	@printf "\n*** Creating Output Directory ***\n"
	$(shell mkdir -p $(OUT_DIR) >/dev/null)

# Phony target to print a message before the build starts...
buildStartMsg: createOutDir
	@printf "\n*** Building Dependent Objects ***\n"

# Target to clean all temporary files...
clean:
	@printf "\n*** Cleaning up files ***\n"
	rm -f  .depend 
	rm -f  $(OBJSB)
	rm -f  $(PROGRAM)
	rm -rf $(OUT_DIR)

# These are the pattern matching rules. In addition to the automatic
# variables used here, the variable $* that matches whatever % stands for
# can be useful in special cases.
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $(OUT_DIR)/$@

# The list of phony targets
.PHONY: clean depend buildStartMsg